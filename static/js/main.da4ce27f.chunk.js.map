{"version":3,"sources":["components/Question.js","components/ExamResults.js","components/ExamScreen.js","components/StartScreen.js","components/NavBar.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Latex","require","Question","_ref","question","totalQuestions","currentQuestion","nextQuestion","setAnswer","selectedAnswers","_useState","useState","_useState2","_slicedToArray","selectedOption","setSelectedOption","timer","useRef","progressBar","divRef","answerList","gotoNextQuestion","index","current","clearTimeout","flushSync","useEffect","classList","remove","setTimeout","add","scrollIntoView","behavior","block","React","createElement","className","ref","displayMode","display","choices","map","choice","key","onClick","disabled","class","ExamResults","result","retry","percentage","correct","total","ExamScreen","currentQuestionIndex","setCurrentQuestionIndex","_useState3","Array","QuestionList","length","_useState4","markedAnswers","setMarkedAnswers","isQuestionEnd","forEach","answer","Math","ceil","calculateResult","option","arr","newArr","_toConsumableArray","StartScreen","start","NavBar","Footer","App","isExamStarted","setIsExamStarted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.da4ce27f.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState, useEffect, useRef} from \"react\";\nimport {flushSync} from 'react-dom';\n// import 'katex/dist/katex.min.css';\n// import 'katex/dist/katex.css';\nvar Latex = require('react-latex');\n\nfunction Question({question,totalQuestions,currentQuestion,nextQuestion,setAnswer,selectedAnswers}){\n    const [selectedOption, setSelectedOption] = useState(null);\n    const timer = useRef(null);\n    const progressBar = useRef(null);\n    const divRef = useRef(null);\n\n    let answerList = [\"(A)\",\"(B)\",\"(C)\",\"(D)\",\"(E)\"];\n\n    function gotoNextQuestion(index){\n        if(timer.current){\n            clearTimeout(timer.current);\n        }\n        flushSync(()=>{\n            setAnswer(selectedOption);\n            nextQuestion(currentQuestion);\n            setSelectedOption(selectedAnswers[currentQuestion])\n        });\n        \n        // console.log('selected answers'+selectedAnswers)\n        // setSelectedOption(selectedAnswers[index]);\n        // setSelectedOption(null);\n    }\n\n    function gotoPreviousQuestion(index){\n        if(timer.current){\n            clearTimeout(timer.current);\n        }\n        flushSync(()=>{\n            setAnswer(selectedOption);\n            nextQuestion(currentQuestion-2);\n            setSelectedOption(selectedAnswers[currentQuestion-2])\n        });\n        // setSelectedOption(null);\n    }\n\n    useEffect(()=>{\n        progressBar.current.classList.remove(\"active\");\n        setTimeout(()=>{\n            progressBar.current.classList.add(\"active\");\n        },0);\n        // scroll question into view on question change\n          divRef.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n        // setSelectedOption(selectedAnswers[currentQuestion])\n        // timer.current = setTimeout(gotoNextQuestion,10*1000); // 10 seconds\n        // return gotoNextQuestion;\n    },[question]);\n\n    // useEffect(()=>{\n    //     setSelectedOption(selectedAnswers[currentQuestion])\n    // },[currentQuestion,selectedAnswers]);\n\n    return (\n        <div className=\"question\" ref={divRef}>\n            <div className=\"progress-bar\" ref={progressBar}></div>\n            <div className=\"question-count\">\n                <b> {currentQuestion} </b>\n                of\n                <b> {totalQuestions} </b>\n            </div>\n            <div className=\"main\">\n                <div className=\"title\">\n                    <span>Question:</span>\n                    <p className=\"latexQuestion\"><Latex displayMode={question.display}>{question.question}</Latex></p>\n                </div>\n                <div className=\"options\">\n                    {\n                        question.choices.map((choice,index)=>{\n                            return (\n                                <div className={index === selectedOption ? \"option active\" : \"option\"}\n                                key={index}\n                                onClick={()=>setSelectedOption(index)}\n                                >\n                                    <span>{answerList[index]}</span>\n                                    <span><Latex>{choice}</Latex></span>\n                                    {/* {answerList[index]} {choice} */}\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </div>\n            <div className=\"control\">\n                <button className={currentQuestion == 1 ? \"disabled\" : \"enabled\"} disabled={currentQuestion == 1 ? true : false} onClick={gotoPreviousQuestion}>\n                    <span class=\"material-symbols-outlined\">chevron_left</span>\n                    Previous\n                    </button>\n                {\n                currentQuestion == totalQuestions ? (\n                    <button className=\"submit-exam\" onClick={gotoNextQuestion}>\n                        Submit\n                        <span class=\"material-symbols-outlined\">check</span>\n                        </button>\n                ) : (\n                    <button onClick={gotoNextQuestion}>\n                        Next\n                        {/* <span class=\"material-symbols-outlined\">arrow_forward_ios</span> */}\n                        <span class=\"material-symbols-outlined\">chevron_right</span>\n                    </button>\n                )\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Question;","import React from \"react\";\n\nfunction ExamResults({result,retry}){\n    return (\n        <div className=\"result-screen\">\n            <h2>Result: {result.percentage}%</h2>\n            <p>Selected {result.correct} correct out of {result.total}.</p>\n            <button onClick={retry}>Retry</button>\n        </div>\n    );\n}\n\nexport default ExamResults;","import React from \"react\";\nimport { useEffect, useState, useRef } from \"react\";\n\nimport QuestionList from \"../data/questions.json\";\nimport Question from \"./Question.js\";\nimport ExamResults from \"./ExamResults.js\";\n\nfunction ExamScreen({retry,total}) {\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [markedAnswers, setMarkedAnswers] = useState(new Array(QuestionList.length));\n    const isQuestionEnd = currentQuestionIndex === QuestionList.length;\n\n    function calculateResult(){\n        let correct = 0;\n        QuestionList.forEach((question,index)=>{\n            if(question.answer == markedAnswers[index]){\n                correct++;\n            }\n        });\n        // let percentage = Math.ceil((correct/QuestionList.length)*100); // why can't I do this in the return?\n        return {\n            correct: correct,\n            total: QuestionList.length,\n            percentage: Math.ceil((correct/QuestionList.length)*100) // why doesn't using total work here\n        };\n    }\n\n    // const timer = useRef(null);\n    // const [seconds, setSeconds] = useState(0);\n    // const [minutes, setMinutes] = useState(60);\n\n    // useEffect(() => {\n    //     timer = setInterval(() => {\n    //         if (seconds===0) {\n    //             setMinutes(minutes-1);\n    //             setSeconds(59);\n    //         } else {\n    //             setSeconds(seconds-1)\n    //         }\n    //     },1000)\n    //     return () => clearInterval(timer); \n    // })\n\n    return (\n        <div className=\"exam-screen\">\n            {\n                isQuestionEnd ? (\n                    <ExamResults \n                        result = {calculateResult()}\n                        retry = {retry}\n                    />\n                ) : (\n                    <Question \n                        question={QuestionList[currentQuestionIndex]}\n                        totalQuestions={QuestionList.length}\n                        currentQuestion={currentQuestionIndex+1}\n                        nextQuestion={(option)=>{\n                            setCurrentQuestionIndex(option)\n                        }}\n                        setAnswer={(index)=>{\n                            setMarkedAnswers((arr)=>{\n                                let newArr = [...arr];\n                                newArr[currentQuestionIndex] = index;\n                                return newArr;\n                            });\n                            // setCurrentQuestionIndex(currentQuestionIndex+1);\n                        }}\n                        selectedAnswers={markedAnswers}\n                        // currentTime={[minutes,seconds]}\n                    />\n                )\n            }\n        </div>\n    );\n}\n\nexport default ExamScreen;","import React from \"react\";\n\nfunction StartScreen({start}) {\n    return (\n        <div className=\"start-screen\">\n            <h2>Calculus BC</h2>\n            <h3>SECTION I, Part A</h3>\n            <h4>Time -- 55 minutes</h4>\n            <h4>Number of Questions -- 30</h4>\n            <p>A CALCULATOR MAY NOT BE USED ON THIS PART OF THE EXAM.</p>\n            <div>\n                <span>\n                        <p><strong>Directions: </strong></p>\n                        <p>Solve each of the following problems. After examining the form of the choices, decide which is the best of the choices given and selected the corresponding answer choice. Do not spend too much time on any one problem.</p>\n                </span>\n                <span>\n                        <p><strong>On this exam: </strong></p>\n                        <p>Solve each of the following problems. After examining the form of the choices, decide which is the best of the choices given and selected the corresponding answer choice. Do not spend too much time on any one problem.</p>\n                </span>\n            </div>\n            \n            <button onClick={start}>Start</button>\n        </div>\n    );\n}\n\nexport default StartScreen;","import React from \"react\";\n\nfunction NavBar() {\n    return (\n        <div className=\"navbar\">\n            <div className=\"logo\">AP Calculus BC - Practice Exam</div>\n            {/* <p className=\"disclaimer\">AP® is a trademark registered by the College Board, which is not affiliated with, and does not endorse, this website.</p> */}\n        </div>\n    )\n}\n\nexport default NavBar;","import React from \"react\";\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <p> Copyright &copy; 2023 CalcPrep</p>\n            {/* <p>Unauthorized copy or reuse of any part of this page is illegal.</p> */}\n            <p className=\"disclaimer\">AP® is a trademark registered by the College Board, which is not affiliated with, and does not endorse, this website.</p>\n        </div>\n    )\n}\n\nexport default Footer;","// import logo from './logo.svg';\nimport 'katex/dist/katex.css';\n// import 'katex/dist/katex.min.css';\nimport './App.css';\n\nimport ExamScreen from \"./components/ExamScreen\";\nimport StartScreen from \"./components/StartScreen\";\nimport NavBar from \"./components/NavBar\";\nimport Footer from './components/Footer';\n\nimport React from \"react\";\nimport { useState } from 'react';\n\nfunction App() {\n  const [isExamStarted, setIsExamStarted] = useState(false);\n\n  return (\n    <div className='app-container'>\n        <NavBar/>\n          <div className=\"exam-container\">\n            {\n              isExamStarted ? (\n                <ExamScreen retry={()=>setIsExamStarted(false)}/>\n              ) : (\n                <StartScreen start={()=>setIsExamStarted(true)}/>\n              )\n            }\n          </div>\n        <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}